name: Generate Image

on:
  schedule:
    - cron: "0 15 * * *" # 日本時間0時に実行
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "src/**"
      - "package.json"
      - "package-lock.json"
      - ".github/workflows/**"
  push:
    branches:
      - main # mainブランチへのプッシュ時に実行

jobs:
  generate:
    runs-on: ubuntu-latest
    permissions:
      contents: write # リポジトリへの書き込み権限を追加
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive" # サブモジュールを再帰的に取得

      # サブモジュールの初期化を明示的に行う
      - name: Initialize submodules
        run: |
          git submodule update --init --recursive
          cd local-imasparql
          git submodule update --init --recursive
          cd ..

      - name: Install required fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-dejavu fonts-lato fonts-liberation fonts-noto

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      # local-imasparqlの起動
      - name: Start local im@sparql
        env:
          TZ: Asia/Tokyo
          LANG: ja_JP.UTF-8
          LC_ALL: ja_JP.UTF-8
        run: |
          echo "Starting local im@sparql..."
          cd local-imasparql
          docker compose up -d
          # SPARQLエンドポイントの起動を待つ
          echo "Waiting for SPARQL endpoint to be ready..."
          sleep 10
          # エンドポイントの動作確認
          curl -s "http://localhost:3030/imasparql/query" > /dev/null
          if [ $? -ne 0 ]; then
            echo "Failed to start SPARQL endpoint"
            exit 1
          fi
          echo "SPARQL endpoint is ready"
          cd ..

      # 画像を生成
      - name: Generate image
        env:
          TZ: Asia/Tokyo
          LANG: ja_JP.UTF-8
          LC_ALL: ja_JP.UTF-8
        run: |
          echo "Running npm start to generate image..."
          date  # 現在の時刻を確認
          npm run start
          echo "Image generation complete."

      # local-imasparqlの停止
      - name: Stop local im@sparql
        if: always() # エラーが発生しても必ず実行
        env:
          TZ: Asia/Tokyo
          LANG: ja_JP.UTF-8
          LC_ALL: ja_JP.UTF-8
        run: |
          echo "Stopping local im@sparql..."
          cd local-imasparql
          docker compose down
          cd ..

      # 生成された画像をコミット
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # リモートURLをトークン付きに変更
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # PR時の処理
            BRANCH_NAME="${{ github.head_ref }}"
            git fetch origin $BRANCH_NAME
            git checkout $BRANCH_NAME
            git add gif/
            git commit -m "Update generated images" || exit 0
            git push origin $BRANCH_NAME
          else
            # mainブランチまたはスケジュール実行時の処理
            # artifactブランチの存在確認と作成
            if ! git ls-remote --heads origin artifact > /dev/null; then
              # artifactブランチが存在しない場合、空のブランチを作成
              git checkout --orphan artifact
              git rm -rf .
              git commit --allow-empty -m "Initial artifact branch"
            else
              # artifactブランチが存在する場合、チェックアウト
              git fetch origin artifact
              git checkout artifact
            fi

            # 既存のgifディレクトリをクリーンアップ
            rm -rf gif/
            mkdir -p gif/

            # 生成されたGIFファイルをコピー
            cp -r /tmp/gif/* gif/ || true

            # 変更をコミットしてプッシュ
            git add gif/
            git commit -m "Update generated images [skip ci]" || exit 0
            git push origin artifact
          fi
